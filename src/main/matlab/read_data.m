function [A, y, names, virus_kasp, virus_mcafee, virus_symantec, column_labels, t_created, cuckoo_idx, splunk_idx] = read_data(dirName, filter)

if (nargin<2)
    filter = {};
    filter{1} = '[cuckoo]';
    %filter = {};
end

names = {};
column_labels = {};
splunk_idx = [];
enterprise_idx = [];
t_created = [];

A = read_A(fullfile(dirName, 'pace_feature_matrix.txt'));
y = dlmread(fullfile(dirName, 'pace_classification.txt'));
cuckoo_idx = 1:length(y);

try
    t_created = dlmread(fullfile(dirName, 'pace_created_labels.txt'));
catch
    fprintf('Could not read time stamps.\n');
end

try
    A_splunk = read_A(fullfile(dirName, 'pace_splunk_feature_matrix.txt'));
    y_splunk = zeros(size(A_splunk,1),1);
    
    splunk_idx = (1:size(A_splunk,1))+size(A,1);
    
    A = [A; A_splunk];
    y = [y; y_splunk];
    
    %adjust also the timestamps for splunk
    t_largest = round(86400 * (now - datenum('1970', 'yyyy')));
    t_created = [t_created; t_largest*ones(length(splunk_idx), 1)];
catch
    fprintf('Could not read splunk data.\n');
end

try
    A_enterprise = read_A(fullfile(dirName, 'pace_enterprise_feature_matrix.txt'));
    y_enterprise = zeros(size(A_enterprise,1),1);
     
    enterprise_idx = (1:size(A_enterprise,1))+size(A,1);

    A = [A; A_enterprise];
    y = [y; y_enterprise];
    
    %adjust also the timestamps for splunk
    t_largest = round(86400 * (now - datenum('1970', 'yyyy')));
    t_created = [t_created; t_largest*ones(length(enterprise_idx), 1)];
catch
    fprintf('Could not read enterprise data.\n');
end

try
    names = read_lines(fullfile(dirName, 'pace_row_labels.txt'));
    names{size(A,1),1} = [];
    try
        names_splunk = read_lines(fullfile(dirName, 'pace_splunk_row_labels_anon.txt'));
        names(splunk_idx) = names_splunk;
    catch
        fprintf('Could not read splunk ware names.\n');
    end
    
    try
        names_enterprise = read_lines(fullfile(dirName, 'pace_enterprise_row_labels_anon.txt'));
        names(enterprise_idx) = names_enterprise;
    catch
        fprintf('Could not read enterprise ware names.\n');
    end
catch
    fprintf('Could not read ware names.\n');
end

try
    virus_kasp = read_lines(fullfile(dirName, 'pace_malware_kaspersky_labels.txt'));
    s = size(virus_kasp,1);
    if (s<size(A,1))
        virus_kasp{size(A,1)} = '<nolabel>';
        for iter=(s+1):size(virus_kasp,1)
            virus_kasp{iter} = '<nolabel>';
        end
    end
catch
    virus_kasp = {};
    fprintf('Could not read Kasperksy malware types.\n');
end

try
    virus_mcafee = read_lines(fullfile(dirName, 'pace_malware_mcafee_labels.txt'));
    s = size(virus_mcafee,1);
    if (s<size(A,1))
        virus_mcafee{size(A,1)} = '<nolabel>';
        for iter=(s+1):size(virus_mcafee,1)
            virus_mcafee{iter} = '<nolabel>';
        end
    end
catch
    virus_mcafee = {};
    fprintf('Could not read McAfee malware types.\n');
end

try
    virus_symantec = read_lines(fullfile(dirName, 'pace_malware_symantec_labels.txt'));
    s = size(virus_symantec,1);
    if (s<size(A,1))
        virus_symantec{size(A,1)} = '<nolabel>';
        for iter=(s+1):size(virus_symantec,1)
            virus_symantec{iter} = '<nolabel>';
        end
    end
catch
    virus_symantec = {};
    fprintf('Could not read Symantec malware types.\n');
end

try
    column_labels = read_lines(fullfile(dirName, 'pace_column_labels_anon.txt'))';
catch
    fprintf('Could not read malware columns.\n');
end


%merge enteprise with splunk
splunk_idx = [splunk_idx, enterprise_idx];

%get empty columns
em = sum(A~=0,1)>=2;
A = A(:,em);
if (~isempty(column_labels))
    column_labels = column_labels(em);
end

%now apply the filter
 if (~isempty(column_labels) && ~isempty(filter))
     I_bad = [];
     %filter the columns
     for iter=1:length(filter)
         v = strfind(column_labels, filter{iter});
         for iter2=1:length(v)
             if (~isempty(v{iter2}))
                 I_bad = [I_bad, iter2];
             end
         end
     end
     I_bad = unique(I_bad);
     indx = setdiff(1:length(column_labels), I_bad);
     
     A = A(:,indx);
     column_labels = column_labels(indx);
 end


if (~islogical(cuckoo_idx))
    cuckoo_idx_temp = false(length(y),1);
    cuckoo_idx_temp(cuckoo_idx) = true;
    cuckoo_idx = cuckoo_idx_temp;
end
if (~islogical(splunk_idx))
    splunk_idx_temp = false(length(y),1);
    splunk_idx_temp(splunk_idx) = true;
    splunk_idx = splunk_idx_temp;
end

valid = true(size(A,1),1);

%remove empty rows from cuckoo results
num_items = sum(A(cuckoo_idx,:),2);
valid(cuckoo_idx) = num_items>=(mean(num_items)-3*std(num_items));

A = A(valid,:);
y = y(valid,:);
t_created = t_created(valid);
if (~isempty(virus_kasp))
    virus_kasp = virus_kasp(valid);
end
if (~isempty(virus_symantec))
    virus_symantec = virus_symantec(valid);
end
if (~isempty(virus_mcafee))
    virus_mcafee = virus_mcafee(valid);
end
if (~isempty(names))
    names = names(valid);
end

cuckoo_idx = cuckoo_idx(valid);
splunk_idx = splunk_idx(valid);


function [A] = read_A(fileName)

S = dlmread(fileName,'\t');

if (size(S,2)~=3)
    A = S;
    return;
end

%create the matrix
A = spconvert([S(2:end,1)+1, S(2:end,2)+1, S(2:end,3)]);

%check that the sizes are valid
if (size(A,2)<S(1,2))
    A = [A, sparse(size(A,1), S(1,2)-size(A,2))];
end
if (size(A,1)<S(1,1))
    A = [A; sparse(S(1,1)-size(A,1), size(A,2))];
end

function [txt] = read_lines(fileName)

    fid = fopen(fileName);

% tline = fgetl(fid);
% count = 1;
% txt = {};
% while ischar(tline)
%     if (count>size(txt,1))
%         txt{count*2,1} = [];
%     end
%     txt{count,1} = tline;
%     tline = fgetl(fid);
%     count = count+1;
% end
% 
% %now cut
% txt = txt(1:(count-1), :);

    txt = textscan(fid,'%s','Delimiter','\n');
    
    txt = txt{1};

    fclose(fid);