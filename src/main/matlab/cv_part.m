function [cv, valid] = cv_part(y, kfold, c, method, t_created, cuckoo_idx, splunk_idx, virus)

  if (nargin<4)
    method = 'standard';
  end
  if (nargin<3)
    c = 0.3;
  end
  
  valid = y==0 | y>=c;
  
  if (~islogical(cuckoo_idx))
    cuckoo_idx_temp = false(length(y),1);
    cuckoo_idx_temp(cuckoo_idx) = true;
    cuckoo_idx = cuckoo_idx_temp;
  end
  if (~islogical(splunk_idx))
    splunk_idx_temp = false(length(y),1);
    splunk_idx_temp(splunk_idx) = true;
    splunk_idx = splunk_idx_temp;
  end
  
  %methods = 'standard', 'creation'

  if (strcmp(method,'creation'))
    t_smallest = round(86400 * (datenum('1995', 'yyyy') - datenum('1970', 'yyyy')));
    t_largest = round(86400 * (now - datenum('1970', 'yyyy')));

    %adjust so the dates make sense
    t_created(t_created<t_smallest | t_created>t_largest) = 0;
    
    t = sort(t_created(t_created>0 & y>=c));
  
    per = 1-1/kfold;
    cutoff = t(round(length(t)*per));
  
    %index of benignware
    I_good = valid & t_created>0 & y==0;
    cv_good = cvpartition(sum(I_good),'KFold',kfold);

    %index of malware
    I_old = valid & t_created>0 & t_created<cutoff & y>0;
    I_new = valid & t_created>0 & t_created>=cutoff & y>0;

    %now partition old
    cv_old = cvpartition(sum(I_old),'KFold',kfold);

    %now combine the data
    for iter=1:kfold
      
      %adjust the indicies
      cv_good_training = zeros(length(y),1);
      cv_good_training(I_good) = cv_good.training(iter);
      cv_good_test = zeros(length(y),1);
      cv_good_test(I_good) = cv_good.test(iter);
      
      cv_old_training = zeros(length(y),1);
      cv_old_training(I_old) = cv_old.training(iter);
      
      cv{iter}.training = cv_old_training | cv_good_training;
      cv{iter}.test = I_new | cv_good_test;
    end
    
  elseif (strcmp(method,'type'))

    %index of benignware
    I_good = valid & y==0;
    cv_good = cvpartition(sum(I_good),'KFold',kfold);

    %split by type
      %for iter=1:length(virus)
      %  x = strsplit(virus{iter},'.');
      %  virus{iter} = lower(x{1});
      %  x = strsplit(virus{iter},'-');
      %  virus{iter} = lower(x{1});
      %end
            
     [unique_names,~,z] = unique(virus);
     %d = hist(z(y>0 & valid),length(unique_names));
          
     %remove no label
     I = ~strcmp(unique_names,'<nolabel>') & ~strcmp(unique_names,'Trojan.Win32.Generic');
     unique_names = unique_names(I);

     I_malware = valid & y>0;
      
    %perform a random permute      
    cv_malware = cvpartition(length(unique_names),'KFold',kfold);

    %now combine the data
    for iter=1:kfold
      
      I_malware_test = false(size(y));
      p = find(cv_malware.test(iter));
      for iter2=1:length(p)
        I_malware_test = I_malware_test | (valid & y>0 & strcmp(virus, unique_names(p(iter2))));
      end
      I_malware_train = I_malware & ~I_malware_test & ~strcmp(virus,'<nolabel>') & ~strcmp(virus,'Trojan.Win32.Generic');

      %adjust the indicies
      cv_good_training = zeros(length(y),1);
      cv_good_training(I_good) = cv_good.training(iter);
      cv_good_test = zeros(length(y),1);
      cv_good_test(I_good) = cv_good.test(iter);
      
      cv{iter}.training = cv_good_training | I_malware_train;
      cv{iter}.test = cv_good_test | I_malware_test;
    end
    
  elseif(strcmp(method,'standard'))
    
    cv_all = cvpartition(sum(valid),'KFold',kfold);
    
    for iter=1:kfold
      cv_adj_training = false(length(y),1);
      cv_adj_training(valid) = cv_all.training(iter);
      cv_adj_test = false(length(y),1);
      cv_adj_test(valid) = cv_all.test(iter);
     
      cv{iter}.training = cv_adj_training;
      cv{iter}.test = cv_adj_test;
    end
  elseif(strcmp(method,'cuckoo_validate'))
    
    cv_all = cvpartition(sum(valid),'KFold',kfold);
    
    for iter=1:kfold
      cv_adj_training = false(length(y),1);
      cv_adj_training(valid) = cv_all.training(iter);
      cv_adj_test = false(length(y),1);
      cv_adj_test(valid) = cv_all.test(iter);
     
      cv{iter}.training = cv_adj_training | (cv_adj_test & ~cuckoo_idx);
      cv{iter}.test = cv_adj_test & cuckoo_idx;
    end
  end
end
  
function [cv_all] = get_parition(y, selected, kfold)
    
    y = y(selected);
    
    good = false;
    count = 1;
    while (~good && count<100)
      cv_all = cvpartition(sum(selected),'KFold',kfold);
      good = true;
      
      for iter=1:kfold
        
        if (sum(y(cv_all.training(iter))==0)<2 || sum(y(cv_all.training(iter))>0)<2)
          good = false;
          break;
        end
      end
      
      count = count+1;
    end
    
    if (~good)
      warn('Could not find a split with all classes in them.');
    end
  end